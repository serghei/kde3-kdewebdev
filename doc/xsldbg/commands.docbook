<?xml version="1.0" encoding="UTF-8" ?>
<chapter id="commands">
<title>Command Reference</title>

<sect1 id="addparam_cmd"><title id="addparam_cmd.title">Addparam</title>
<para>Add a libxslt parameter ;  equivalent to providing --param &lt;QNAME&gt;:&lt;XPATH&gt; via command line. 
</para>
<para></para>
<table><title>Addparam usage</title>
<tgroup cols="1"><tbody>
<row><entry>addparam &lt;QNAME&gt; &lt;XPATH&gt;&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(The &lt;XPATH&gt; must not contain any spaces nor double quotation marks.) </emphasis></entry></row>
<row><entry>addparam &lt;QNAME&gt; "&lt;XPATH&gt;"&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(Must not contain double quotation marks in &lt;XPATH&gt;)</emphasis></entry></row>
</tbody>
</tgroup> 
</table>
</sect1>

<sect1 id="addwatch_cmd"><title id="addwatch_cmd.title">Addwatch</title>
<para>Add an expression to be watched. See showwatch for display watch values</para>
<para>Shortcut name: watch</para>
<table><title>Addwatch usage</title>
<tgroup cols="1"><tbody>
<row><entry>addwatch &lt;XPATH&gt;</entry></row>
</tbody>
</tgroup> 
</table>
</sect1>

<sect1 id="base_cmd"><title id="base_cmd.title">Base</title>
<para>Print the base for this node</para>
<table><title>Base usage</title>
<tgroup cols="1">
<tbody>
<row><entry>base</entry></row>
</tbody>
</tgroup>
</table>
</sect1>

<sect1 id="break_cmd"><title id="break_cmd.title">Break</title>
<para>Break at a template, at a location in a stylesheet or xml file loaded by xsldbg, or at the current node.
New for xsldbg 3.1.4: When in gdb compatabilty mode orpaned breakpoints can be
set at a specific file and line number and be resolved to an active later on. </para>
<para>Shortcut name: b</para><para>xsldbg will try to guess the complete URL given a 
<informaltable>
<tgroup cols="1"><tbody>
<row><entry>file name without a path specified.</entry></row>
<row><entry>a file name in the same directory as the "top" stylesheet loaded</entry></row>
<row><entry>a file name relative to the current working directory of xsldbg</entry></row>
</tbody></tgroup>
</informaltable>
Ie if you have loaded a stylesheet file of ../en/xsldoc.xsl you can do this
</para><para> break -l xsldoc.xsl 26
</para><para>This command will match a partial or complete QNAME template and or mode name provided. Eg "template" will ma/tch any QNAME with a local part of "template"
</para><para>Any name spaces in the provided QNAME will be expanded as specified 
by the names spaces defined in the XSL SOURCE file. eg "xsl:test1"  will be expanded to "http://www.w3.org/199/XSL/Transform:test1"
</para><para>A requested breakpoint may need to be resolved to its associated URL and line number. This is done automaticly after 
the first template has been seen by xsldbg. Breakpoints are re-validated shortly after the start of each run. 
</para><para>Automatic breakpoint validation is used when gdb mode is enabled - the default behaviour of xsldbg</para>
<table><title>Break usage</title>
<tgroup cols="1">
<tbody>
<row><entry>break -l &lt;FILENAME&gt; &lt;LINENO&gt;&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(To set breakpoint at specified file, line number)</emphasis></entry></row>
<row><entry>break -l &lt;URI&gt; &lt;LINENO&gt;&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(To set breakpoint at specified URI, line number)</emphasis></entry></row>
<row><entry>break &lt;TEMPLATE_NAME&gt;&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(To break at named or matched template.)</emphasis></entry></row>
<row><entry>break &lt;TEMPLATE_NAME&gt; &lt;MODE_NAME&gt;&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(To break at named template with given mode.)></emphasis></entry></row>
<row><entry>break "" &lt;MODE_NAME&gt;&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(To break at any template that has a given mode name)</emphasis></entry></row>
<row><entry>break *&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(To break at any template found.)</emphasis></entry></row>
<row><entry>break \*&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(To break at the "*" template. Other name that include '*' will not be treated specialy.)</emphasis></entry></row>
<row><entry>break &nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(To break point at current node. Yes that includes xml data nodes!)</emphasis></entry></row>
</tbody>
</tgroup>
</table>
</sect1>

<sect1 id="bye_cmd"><title id="bye_cmd.title">Bye</title>
<para>Exit processing stylesheet as soon as possible.</para>
<table><title>Bye usage</title>
<tgroup cols="1">
<tbody>
<row><entry>bye</entry></row>
</tbody>
</tgroup>
</table>
</sect1>

<sect1 id="cat_cmd"><title id="cat_cmd.title">Cat</title>
<para>Print the result of a xpath expression on relative current node.</para>
<table><title>Cat usage</title>
<tgroup cols="1">
<tbody>
<row><entry>Usage : cat &lt;XPATH&gt;&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(To view a variable or parameter)</emphasis></entry></row>
<row><entry>Usage : cat $&lt;QNAME&gt;</entry></row>
</tbody>
</tgroup>
</table>
</sect1>

<sect1 id="cd_cmd"><title id="cd_cmd.title">Cd</title>
<para>Change to the path specified by a xpath.</para>
<table><title>Cd usage</title>
<tgroup cols="1">
<tbody>
<row><entry>&lt;&lt;         = preceding-sibling::node()</entry></row>
<row><entry>&gt;&gt;         = following-sibling::node()</entry></row>
<row><entry>&lt;-         = ancestor::node()</entry></row>
<row><entry>-&gt;         = decendant::node()</entry></row>
</tbody></tgroup>
</table>
</sect1>

<sect1 id="chdir_cmd"><title id="chdir_cmd.title">Chdir</title>
<para>Change the working directory</para>
<table><title>Chdir usage</title>
<tgroup cols="1">
<tbody>
<row><entry>chdir &lt;PATH&gt;&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(A relative or absolute path for operating system)</emphasis></entry></row>
</tbody>
</tgroup>
</table>
</sect1>

<sect1 id="continue_cmd"><title id="continue_cmd.title">Continue</title>
<para>Continue running stylesheet, stopping at any break points found.</para>
<para>Shortcut name: c</para>
<table><title>Contine usage</title>
<tgroup cols="1">
<tbody>
<row><entry>continue</entry></row>
</tbody>
</tgroup>
</table>
</sect1>

<sect1 id="data_cmd"><title id="data_cmd.title">Data</title>
<para>Switch to displaying the current node in xml data. Or change xml data used</para>
<table><title>Data usage</title>
<tgroup cols="1">
<tbody>
<row><entry>data&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(Switch to the current document node.)</emphasis></entry></row>
<row><entry>data &lt;DATA&gt;&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(To change to a new xml data file.  A leading "~" is replaced by the $HOME environment variable value. Will need to use "run" command to process it)</emphasis></entry></row>
</tbody>
</tgroup>
</table>
</sect1>

<sect1 id="delete_cmd"><title id="delete_cmd.title">Delete</title>
<para>Delete a template breakpoint</para>
<para>Shortcut name: d</para>
<table><title>Delete usage</title>
<tgroup cols="1">
<tbody>
<row><entry>delete&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(To delete breakpoint at current node)</emphasis></entry></row>
<row><entry>delete   &lt;BREAKPOINT_ID&gt;&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(To delete breakpoint at specified break point number)</emphasis></entry></row>
<row><entry>delete -l &lt;FILENAME&gt; &lt;LINENO&gt;&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(Delete at specifed file, line number)</emphasis></entry></row>
<row><entry>delete -l &lt;URI&gt; &lt;LINENO&gt;&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(Delete at specifed URI, line number)</emphasis></entry></row>
<row><entry>delete &lt;TEMMPLATENAME&gt;&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(To delete break point at named template.)</emphasis></entry></row>
<row><entry>delete *&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(To delete all break points.)</emphasis></entry></row>
</tbody>
</tgroup>
</table>
</sect1>

<sect1 id="delparam_cmd"><title id="delparam_cmd.title">Delparam</title>
<para>Delete a libxslt parameter</para>
<table><title>Delparam usage</title>
<tgroup cols="1">
<tbody>
<row><entry>delparam&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(Delete all parameters present)</emphasis></entry></row>
<row><entry>delparam &lt;PARAM_ID&gt;</entry></row>
</tbody>
</tgroup>
</table>
</sect1>

<sect1 id="delwatch_cmd"><title id="delwatch_cmd.title">Delwatch</title>
<para>Delete a watch expression or remove all watch expressions as displayed by "showwatch." command</para>
<table><title>Delwatch usage</title>
<tgroup cols="1">
<tbody>
<row><entry>delwatch &lt;WATCHID&gt;&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(Delete a watch expression with given ID)</emphasis></entry></row>
<row><entry>delwatch *&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(Delete all watch expressions)</emphasis></entry></row>
</tbody>
</tgroup>
</table>
</sect1>

<sect1 id="dir_cmd"><title id="dir_cmd.title">Dir</title>
<para>Print list of nodes in a similary way to the dir shell command.</para>
<para/>
<table><title>Dir usage</title>
<tgroup cols="1">
<tbody>
<row><entry>dir</entry></row>
</tbody>
</tgroup>
</table>
</sect1>

<sect1 id="disable_cmd"><title id="disable_cmd.title">Disable</title>
<para>Disable a breakpoint</para>
<table><title>Disable usage</title>
<tgroup cols="1">
<tbody>
<row><entry>disable&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(To disable breakpoint at current node)</emphasis></entry></row>
<row><entry>disable   &lt;BREAKPOINT_ID&gt;&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(To disable breakpoint at specified break point number</emphasis></entry></row>
<row><entry>disable -l &lt;FILENAME&gt; &lt;LINENO&gt;&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(Disable breakpoint at specifed file, line number)</emphasis></entry></row>
<row><entry>disable -l &lt;URI&gt; &lt;LINENO&gt;&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(Disable breakpoint at specifed URI, line number)</emphasis></entry></row>
</tbody>
</tgroup>
</table>
</sect1>

<sect1 id="du_cmd"><title id="du_cmd.title">Du</title>
<para>Print a summary of child nodes in a tree format.</para>
<table><title>Du usage</title>
<tgroup cols="1">
<tbody>
<row><entry>du</entry></row>
</tbody>
</tgroup>
</table>
</sect1>

<sect1 id="dump_cmd"><title id="dump_cmd.title">Dump</title>
<para>Dump the gory details of this node</para>
<table><title>Dump usage</title>
<tgroup cols="1">
<tbody>
<row><entry>dump</entry></row>
</tbody>
</tgroup>
</table>
</sect1>

<sect1 id="enable_cmd"><title id="enable_cmd.title">Enable</title>
<para>Enable or disable a breakpoint (Toggle enable/disable/)</para>
<para>Shortcut name: e</para>
<table><title>Enable usage</title>
<tgroup cols="1">
<tbody>
<row><entry>enable&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(To enable/disable breakpoint at current node)</emphasis></entry></row>
<row><entry>enable   &lt;BREAKPOINT_ID&gt;&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(To enable/disable breakpoint at specified break point number</emphasis></entry></row>
<row><entry>enable -l &lt;FILENAME&gt; &lt;LINENO&gt;&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(Enable/disable breakpoint at specifed file, line number)</emphasis></entry></row>
<row><entry>enable -l &lt;URI&gt; &lt;LINENO&gt;&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(Enable/disable breakpoint at specifed URI, line number)</emphasis></entry></row>
</tbody>
</tgroup>
</table>
</sect1>

<sect1 id="entities_cmd"><title id="entities_cmd.title">Entities</title>
<para>Print list of external General Parsed entities used data file (document)</para>
<para>Shortcut name : ent</para>
<table><title>Entities usage</title>
<tgroup cols="1">
<tbody>
<row><entry>entities</entry></row>
</tbody>
</tgroup>
</table>
</sect1>

<sect1 id="exit_cmd"><title id="exit_cmd.title">Exit</title>
<para>Exit processing stylesheet as soon as possible.</para>
<table><title>Exit usage</title>
<tgroup cols="1">
<tbody>
<row><entry>exit</entry></row>
</tbody>
</tgroup>
</table>
</sect1>

<sect1 id="frame_cmd"><title id="frame_cmd.title">Frame</title>
<para>Print the stack frame at a given depth</para>
<para>Shortcut name: f</para>
<table><title>Frame usage</title>
<tgroup cols="1">
<tbody>
<row><entry>frame &lt;FRAME_DEPTH&gt;&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(Depth is a number from 0 to the current depth of call stack)</emphasis></entry></row>
</tbody>
</tgroup>
</table>
</sect1>

<sect1 id="free_cmd"><title id="free_cmd.title">Free</title>
<para>Free stylesheet and data        (Disabled see run)</para>
<table><title>Free usage</title>
<tgroup cols="1">
<tbody>
<row><entry>free</entry></row>
</tbody>
</tgroup>
</table>
</sect1>

<sect1 id="globals_cmd"><title id="globals_cmd.title">Globals</title>
<para>Print a list of global stylesheet variables or parameters. Print the value of a global variable</para>
<table><title>Globals usage</title>
<tgroup cols="1">
<tbody>
<row><entry>globals&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(Print list of all globaly available variables)</emphasis></entry></row>
<row><entry>globals -f&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(Print list of all globaly available variables and thier values)</emphasis></entry></row>
<row><entry>globals &lt;QNAME&gt;&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(Print the value of variable specified)</emphasis></entry></row>
</tbody>
</tgroup>
</table>
</sect1>

<sect1 id="help_cmd"><title id="help_cmd.title">Help</title>
<para>Display help on command or overiew</para>
<para>Shortcut name: h</para>
<table><title>Help usage</title>
<tgroup cols="1">
<tbody>
<row><entry>help   &nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(Show overview of product)</emphasis></entry></row>
<row><entry>help &lt;COMMAND&gt; &nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(Show help about a command)</emphasis></entry></row>
</tbody>
</tgroup>
</table>
</sect1>

<sect1 id="load_cmd"><title id="load_cmd.title">Load</title>
<para>Load the xsldbg's options and user preferences from disk</para>
<table><title>Load usage</title>
<tgroup cols="1">
<tbody>
<row><entry>load</entry></row>
</tbody>
</tgroup>
</table>
</sect1>

<sect1 id="locals_cmd"><title id="locals_cmd.title">Locals</title>
<para>Print a list of local stylesheet variables or parameters. Print the value of a local variable</para>
<table><title>Locals usage</title>
<tgroup cols="1">
<tbody>
<row><entry>locals&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(Print list of all locally available variables)</emphasis></entry></row>
<row><entry>locals -f&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(Print list of all locally available variables and thier values)</emphasis></entry></row>
<row><entry>locals &lt;QNAME&gt;&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(Print the value of variable specified)</emphasis></entry></row>
</tbody>
</tgroup>
</table>
</sect1>

<sect1 id="ls_cmd"><title id="ls_cmd.title">Ls</title>
<para>List nodes in a brief format</para>
<table><title>Ls usage</title>
<tgroup cols="1">
<tbody>
<row><entry>ls</entry></row>
</tbody>
</tgroup>
</table>
</sect1>

<sect1 id="next_cmd"><title id="next_cmd.title">Next</title>
<para>Skip over an xsl:call-template or xsl:apply-templates.
This command has the same effect of entering the commands "step" and then "up"</para>
<para>Shortcut name: n</para>
<table><title>Next usage</title>
<tgroup cols="1">
<tbody>
<row><entry>next&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(proceed to next sibling instruction)</emphasis></entry></row>
</tbody>
</tgroup>
</table>
</sect1>

<sect1 id="options_cmd"><title id="options_cmd.title">Options</title>
<para>Print the values for xsldbg's option</para>
<table><title>Options usage</title>
<tgroup cols="1">
<tbody>
<row><entry>options</entry></row>
</tbody>
</tgroup>
</table>
</sect1>

<sect1 id="output_cmd"><title id="output_cmd.title">Output</title>
<para>Specify a local, writable file to be used for output of results</para>
<para>Shortcut name : o</para>
<table><title>Output usage</title>
<tgroup cols="1">
<tbody>
<row><entry>output &lt;FILENAME&gt;&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(A local writable file name. Which can have a "~" prefix on *nix and CYGWIN platforms. Or environment variables under RISC OS)</emphasis></entry></row>
<row><entry>output &lt;URI&gt;&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(The &lt;URI&gt; must only use the "file://" protocol. This is then converted to a file name suitable for the operating system)</emphasis></entry></row>
<row><entry>output -&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>( Send to standard output. Must only be used when using xsldbg's command line prompt )</emphasis></entry></row>
</tbody>
</tgroup>
</table>
</sect1>

<sect1 id="public_cmd"><title id="public_cmd.title">Public</title>
<para>Print the value that a public ID maps via the current catalog</para>
<para>Shortcut name : pub</para>
<table><title>Public usage</title>
<tgroup cols="1">
<tbody>
<row><entry>public "&lt;PublicID&gt;"</entry></row>
</tbody>
</tgroup>
</table>
</sect1>

<sect1 id="pwd_cmd"><title id="pwd_cmd.title">Pwd</title>
<para>Print the current working directory.</para>
<table><title>Pwd usage</title>
<tgroup cols="1">
<tbody>
<row><entry>pwd</entry></row>
</tbody>
</tgroup>
</table>
</sect1>

<sect1 id="quit_cmd"><title id="quit_cmd.title">Quit</title>
<para>Exit processing stylesheet as soon as possible.</para>
<para>Shortcut name: q</para>
<table><title>Quit usage</title>
<tgroup cols="1">
<tbody>
<row><entry>quit</entry></row>
</tbody>
</tgroup>
</table>
</sect1>

<sect1 id="run_cmd"><title id="run_cmd.title">Run</title>
<para>Restart the stylesheet.</para>
<para>Shortcut name: r</para>
<table><title>Run usage</title>
<tgroup cols="1">
<tbody>
<row><entry>run</entry></row>
</tbody>
</tgroup>
</table>
</sect1>

<sect1 id="save_cmd"><title id="save_cmd.title">Save</title>
<para>Save the xsldbg's options and user preferences to disk</para>
<table><title>Save usage</title>
<tgroup cols="1">
<tbody>
<row><entry>save</entry></row>
</tbody>
</tgroup>
</table>
</sect1>

<sect1 id="search_cmd"><title id="search_cmd.title">Search</title>
<para>Search a dataBase of all information gathered from stylesheets loaded</para>
<para>All output files are stored in, value of the "searchresultspath" option if set, or the same directory as the provided stylesheet. searchresults.xml is normally transformed by  search.xsl, but will be transformed using searchhtml.xsl if the "prefrehtml" option is set.
</para><para>When the search command is issued a xml file (searchresults.xml) will be created. You can then process this file with your own stylesheet to present data in a other ways. If "preferhtml" option is not set
then searchresult.txt is printed to display. 
</para><para>Depending on the amount of data collected it might take a while to complete this command.
</para>
<table><title>Search usage</title>
<tgroup cols="1">
<tbody>
<row><entry>search &lt;XPATH&gt;&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(See what xpath can be used see search.dtd. The deafault &lt;XPATH&gt; is '//search/*' )</emphasis></entry></row>
<row><entry>search -sort &lt;XPATH&gt;&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(Tell search.xsl to sort the result before outputing it)</emphasis></entry></row>
</tbody>
</tgroup>
</table>
</sect1>

<sect1 id="set_cmd"><title id="set_cmd.title">Set</title>
<para>Set the value of a variable</para>
<table><title>Set usage</title>
<tgroup cols="1">
<tbody>
<row><entry>set &lt;VARIABLE_NAME&gt; &lt;XPATH&gt;</entry></row>
</tbody>
</tgroup>
</table>
</sect1>

<sect1 id="setoption_cmd"><title id="setoption_cmd.title">Setoption</title>
<para>Set an option for execution of stylesheet</para>
<para>You will need to use run command to active changes</para>
<table><title>Setoption usage</title>
<tgroup cols="1">
<tbody>
<row><entry>setoption &lt;OPTION_NAME&gt; &lt;INTEGER_VALUE&gt;</entry></row>
<row><entry>Where &lt;OPTION_NAME&gt; can be either</entry></row>
<row><entry>
    <para>
    <informaltable>
    <tgroup cols="1"><tbody>
    <row><entry>debug&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(If &lt;INTEGER_VALUE&gt; is true dump the tree of the result instead)</emphasis></entry></row>
    <row><entry>catalogs&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(If &lt;INTEGER_VALUE&gt; is true use the catalogs from $SGML_CATALOG_FILES or SGML$CatalogFiles for risc operating system)</emphasis></entry></row>
    <row><entry>html&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(If &lt;INTEGER_VALUE&gt; is true the input document is an HTML file)</emphasis></entry></row>
    <row><entry>docbook&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(If &lt;INTEGER_VALUE&gt; is true and docbook is still supported by libxml the input document is SGML docbook)</emphasis></entry></row>
    <row><entry>xinclude&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(If &lt;INTEGER_VALUE&gt; is true do XInclude processing on document intput)</emphasis></entry></row>
    <row><entry>preferhtml&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(If &lt;INTEGER_VALUE&gt; is true the prefer html output for search results. : See search command)</emphasis></entry></row>
    <row><entry>autoencode&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(If &lt;INTEGER_VALUE&gt; is true try to use the encoding from the stylesheet)</emphasis></entry></row>
    <row><entry>utf8input&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(If &lt;INTEGER_VALUE&gt; is true All input from user is in UTF-8.This is normaly used when xsldbg is running as a thread)</emphasis></entry></row>
    <row><entry>&nbsp;&nbsp;&nbsp;&nbsp;<emphasis></emphasis></entry></row>
    <row><entry>gdb&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(Run in gdb compatability mode)</emphasis>
        <para>
        <informaltable>
        <tgroup cols="1"><tbody>
        <row><entry>For a value of 1 this means
            <para>
            <informaltable>
            <tgroup cols="1"><tbody>
            <row><entry>Print lots more messages. Increase the frequency of printing "Breapoint at ..."</entry></row>
            <row><entry>At most GDB_LINES_TO_PRINT lines will be printed when evalating expressions, followed by a "...". See options.h to change this value, the default is three lines of text</entry></row>
            <row><entry>Both local and globals will be printed when the "locals" command is issued </entry></row>
            <row><entry>When printing expresssions with cat/print. The evaluated value will be prefixed by "= "  &lt; EXPRESSION &gt;</entry></row>
            </tbody></tgroup>
            </informaltable>
            </para>
        </entry></row>
        <row><entry/></row>
        <row><entry>For a value of 2 this means
            <para>
            <informaltable>
            <tgroup cols="1"><tbody>
            <row><entry>Print messages needed by KDbg as well as the output state above (when value is 1) </entry></row>
            </tbody></tgroup>
            </informaltable>
            </para>
        </entry></row>
        </tbody></tgroup>
        </informaltable>
        </para>
    </entry></row>
    <row><entry>nonet&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(If &lt;INTEGER_VALUE&gt; is true refuse to fetch DTDs or entities over network)</emphasis></entry></row>
    <row><entry>novalid&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(If &lt;INTEGER_VALUE&gt; is true skip the DTD loading phase)</emphasis></entry></row>
    <row><entry>repeat&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(If &lt;INTEGER_VALUE&gt; is true run the transformation 20 times)</emphasis></entry></row>
    <row><entry>profile&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(If &lt;INTEGER_VALUE&gt; is true  dump profiling informations)</emphasis></entry></row>
    <row><entry>timing&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(If &lt;INTEGER_VALUE&gt; is true display the time used)</emphasis></entry></row>
    <row><entry>noout&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(If &lt;INTEGER_VALUE&gt; is true do not dump the result)</emphasis></entry></row>
    </tbody></tgroup>
    </informaltable>
    </para>
</entry></row>
<row><entry>Where value is true if it is NOT equal to zero</entry></row>
<row><entry>Where value is false if it IS equal to zero</entry></row>
<row><entry>stdout&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>Print all error messages to stdout. Normally error messages go to stderr.</emphasis></entry></row>
<row><entry>setoption &lt;OPTION_NAME&gt; "&lt;STRING_VALUE&gt;"&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(Must not contain double quotation marks in &lt;STRING_VALUE&gt;)</emphasis></entry></row>
<row><entry>setoption &lt;OPTION_NAME&gt; &lt;STRING_VALUE&gt;&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(Must not contain any spaces, nor double quotation marks in &lt;STRING_VALUE&gt;)</emphasis></entry></row>
<row><entry>Where &lt;OPTION_NAME&gt; can be either</entry></row>
<row><entry>
    <para>
    <informaltable>
    <tgroup cols="1"><tbody>
    <row><entry>data&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(Data file's URI)</emphasis></entry></row>
    <row><entry>source&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(Source file's URI)</emphasis></entry></row>
    <row><entry>output&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(Output file's SystemID )</emphasis></entry></row>
    <row><entry>docspath&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(Path to use when looking for documentation)</emphasis></entry></row>
    <row><entry>catalognames&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(The names of the catalogs to use when the catalogs option is set. Value will be lost if set before setting catalogs option)</emphasis></entry></row>
    <row><entry>encoding&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(What encoding to use for standard output)</emphasis></entry></row>
    <row><entry>searchresultspath&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>What path is to be used when storing the results of searching. If this is not set then xsldbg will use the path of the stylesheet</emphasis></entry></row>
    </tbody></tgroup>
    </informaltable>
    </para>
</entry></row></tbody>
</tgroup>
</table>
</sect1>

<sect1 id="shell_cmd"><title id="shell_cmd.title">Shell</title>
<para>Execute shell command</para>
<table><title>Shell usage</title>
<tgroup cols="1">
<tbody>
<row><entry>shell &lt;TEXT&gt;&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(&lt;TEXT&gt; is the text to be passed to operating system for execution)</emphasis></entry></row>
</tbody>
</tgroup>
</table>
</sect1>

<sect1 id="showbreak_cmd"><title id="showbreak_cmd.title">Showbreak</title>
<para>To display list of template break points.</para>
<para>Shortcut name: show</para><para>If a mode exists on a template breakpoint then it will
      be appended to the end of template name for breakpoint. An example of the output is :
<informaltable>
<tgroup cols="1"><tbody>
<row><entry> Breakpoint 3 enabled for template :"*" in file test1.xsl : line 105</entry></row>
<row><entry> Breakpoint 2 enabled for template :"* testMode" in file test1.xsl : line 109</entry></row>
<row><entry> Breakpoint 1 enabled for template :"* http://www.w3.org/1999/XSL/Transform:testMode" in file test1.xsl : line 113</entry></row>
<row><entry/></row>
<row><entry>  Total of 3 breakpoints present</entry></row>
</tbody></tgroup></informaltable></para>
<table><title>Showbreak usage</title>
<tgroup cols="1">
<tbody>
<row><entry>showbreak</entry></row>
</tbody>
</tgroup>
</table>
</sect1>

<sect1 id="showparam_cmd"><title id="showparam_cmd.title">Showparam</title>
<para>Print the libxslt parameters present</para>
<table><title>Showparam usage</title>
<tgroup cols="1">
<tbody>
<row><entry>showparam</entry></row>
</tbody>
</tgroup>
</table>
</sect1>

<sect1 id="showwatch_cmd"><title id="showwatch_cmd.title">Showwatch</title>
<para>Show the current expression being watched</para>
<para>Shortcut name: watches</para>
<table><title>Showwatch usage</title>
<tgroup cols="1">
<tbody>
<row><entry>showwatch&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(Show the currently selected watches and thier values)</emphasis></entry></row>
<row><entry>showwatch 1&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(Enable the automatic printing of watch expressions. This is used by default.)</emphasis></entry></row>
<row><entry>showwatch 0&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(Disable the automatic printing of watch expressions.)</emphasis></entry></row>
</tbody>
</tgroup>
</table>
</sect1>

<sect1 id="source_cmd"><title id="source_cmd.title">Source</title>
<para>Switch to displaying the current node in stylesheet. Or change stylesheet used</para>
<table><title>Source usage</title>
<tgroup cols="1">
<tbody>
<row><entry>source&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(Switch to the current node in stylesheet.)</emphasis></entry></row>
<row><entry>source &lt;SOURCE&gt;&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(To change to a new source file.  A leading "~" is replaced by the $HOME environment variable value. Will need to use "run" command to execute it)</emphasis></entry></row>
</tbody>
</tgroup>
</table>
</sect1>

<sect1 id="step_cmd"><title id="step_cmd.title">Step</title>
<para>Step until next stylesheet instruction.</para>
<para>Shortcut name: s</para>
<table><title>Step usage</title>
<tgroup cols="1">
<tbody>
<row><entry>step</entry></row>
</tbody>
</tgroup>
</table>
</sect1>

<sect1 id="stepdown_cmd"><title id="stepdown_cmd.title">Stepdown</title>
<para>Step down to a newer "call frame".  </para>
<para>Shortcut name: down</para>
<table><title>Stepdown usage</title>
<tgroup cols="1">
<tbody>
<row><entry>stepdown &nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(step down one frame)</emphasis></entry></row>
<row><entry>stepdown &lt;NUMBER_OF_FRAMES&gt;&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(step down specified number of frames)</emphasis></entry></row>
</tbody>
</tgroup>
</table>
</sect1>

<sect1 id="stepup_cmd"><title id="stepup_cmd.title">Stepup</title>
<para>Step up to a older "call frame".  </para>
<para>Shortcut name: up</para><para>This is not an accurate command, xsldbg will stop as close as it can. </para>
<table><title>Stepup usage</title>
<tgroup cols="1">
<tbody>
<row><entry>stepup &nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(step up one frame)</emphasis></entry></row>
<row><entry>stepup &lt;NUMBER_OF_FRAMES&gt; &nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(step up specified number of frames)</emphasis></entry></row>
</tbody>
</tgroup>
</table>
</sect1>

<sect1 id="stylesheets_cmd"><title id="stylesheets_cmd.title">Stylesheets</title>
<para>Print out a list of stylesheets loaded</para>
<para>Shortcut name: style</para>
<table><title>Stylesheets usage</title>
<tgroup cols="1">
<tbody>
<row><entry>stylesheets</entry></row>
</tbody>
</tgroup>
</table>
</sect1>


<sect1 id="system_cmd"><title id="system_cmd.title">System</title>
<para>Print the value that a system file maps via the current catalog</para>
<para>Shortcut name : sys</para>
<table><title>System usage</title>
<tgroup cols="1">
<tbody>
<row><entry>system "&lt;SystemID&gt;"</entry></row>
</tbody>
</tgroup>
</table>
</sect1>

<sect1 id="templates_cmd"><title id="templates_cmd.title">Templates</title>
<para>Print a list of available templates. Search for a template</para>
<para>Shortcut name: t</para>
<table><title>Templates usage</title>
<tgroup cols="1">
<tbody>
<row><entry>templates</entry></row>
<row><entry>templates &lt;TEMPLATE&gt;&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(Print details of template named &lt;TEMPLATE&gt; if it can be found)</emphasis></entry></row>
</tbody>
</tgroup>
</table>
</sect1>

<sect1 id="trace_cmd"><title id="trace_cmd.title">Trace</title>
<para>Trace one execution of the stylesheet printing the file and lines of
intermediate steps</para>
<table><title>Trace usage</title>
<tgroup cols="1">
<tbody>
<row><entry>trace</entry></row>
</tbody>
</tgroup>
</table>
</sect1>

<sect1 id="tty_cmd"><title id="tty_cmd.title">Tty</title>
<para>Open a terminal. Set the level of tty redirection.</para>
<table><title>Tty usage</title>
<tgroup cols="1">
<tbody>
<row><entry>tty &lt;DEVICE_PATH&gt;&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(Where  &lt;DEVICE_PATH&gt; is a valid terminal on the operating system. Just tries to open the terminal</emphasis></entry></row>
<row><entry>tty &lt;TTY_LEVEL&gt;&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(Set the level of tty redirection, where &lt;TTY_LEVEL&gt; is a valid level of input/output to use)</emphasis>
<para>
    <informaltable>
    <tgroup cols="1"><tbody>
    <row><entry>Where level is </entry></row>
    <row><entry>0 = Default input/output </entry></row>
    <row><entry>1 = Terminal output of results of transformation, tracing and walking &nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(Default state when tty device has been opened. Not fully implemented yet.)</emphasis></entry></row>
    <row><entry>2 = Full redirection to terminal&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(Not implemented yet.)</emphasis></entry></row>
    <row><entry>All other integer values are assumed to mean level 0
    </entry></row>
    </tbody>
    </tgroup>
    </informaltable>
</para>
</entry></row></tbody>
</tgroup>
</table>
</sect1>

<sect1 id="validate_cmd"><title id="validate_cmd.title">Validate</title>
<para>Validate the output file generated by stylesheet    (Disabled)</para>
<table><title>Validate usage</title>
<tgroup cols="1">
<tbody>
<row><entry>validate</entry></row>
</tbody>
</tgroup>
</table>
</sect1>

<sect1 id="walk_cmd"><title id="walk_cmd.title">Walk</title>
<para>Walk through code using a range of speeds</para>
<table><title>Walk usage</title>
<tgroup cols="1">
<tbody>
<row><entry>walk &lt;SPEED&gt;&nbsp;&nbsp;&nbsp;&nbsp;<emphasis>(Use Ctrl-c to stop
execution, &lt;SPEED&gt; is a value between 0 and 9. Where 0 means stop, 1 is
very fast, 9 is very slow)</emphasis></entry></row>
</tbody>
</tgroup>
</table>
</sect1>

<sect1 id="where_cmd"><title id="where_cmd.title">Where</title>
<para>Print a trace of templates calls (frame stack) and print the working directory.</para>
<para>Shortcut name: w</para>
<table><title>Where usage</title>
<tgroup cols="1">
<tbody>
<row><entry>where</entry></row>
</tbody>
</tgroup>
</table>
</sect1>

<sect1 id="write_cmd"><title id="write_cmd.title">Write</title>
<para>To be completed</para>
<table><title>Write usage</title>
<tgroup cols="1">
<tbody>
<row><entry>write</entry></row>
</tbody>
</tgroup>
</table>
</sect1>





</chapter>
