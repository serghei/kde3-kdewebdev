# Makefile.in generated by automake 1.10.1 from Makefile.am.
# KDE tags expanded automatically by am_edit - $Revision: 483858 $ 
# @configure_input@

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

@SET_MAKE@


VPATH = @srcdir@
pkgdatadir = $(datadir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = @build@
host_triplet = @host@
target_triplet = @target@
subdir = quanta/project
DIST_COMMON = $(noinst_HEADERS) $(srcdir)/Makefile.am \
	$(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/acinclude.m4 \
	$(top_srcdir)/configure.in
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(SHELL) $(top_srcdir)/admin/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
LTLIBRARIES = $(noinst_LTLIBRARIES)
libproject_la_LIBADD =
am_libproject_la_OBJECTS = projectnewgeneral.lo projectnewlocal.lo \
	rescanprj.lo projectnewfinal.lo projectupload.lo project.lo \
	projectnewweb.lo projectlist.lo teammembersdlg.lo \
	membereditdlg.lo eventconfigurationdlg.lo eventeditordlg.lo \
	uploadprofiles.lo projectprivate.lo
#>- libproject_la_OBJECTS = $(am_libproject_la_OBJECTS)
#>+ 8
libproject_la_final_OBJECTS = libproject_la.all_cpp.lo 
libproject_la_nofinal_OBJECTS = projectnewgeneral.lo projectnewlocal.lo \
	rescanprj.lo projectnewfinal.lo projectupload.lo project.lo \
	projectnewweb.lo projectlist.lo teammembersdlg.lo \
	membereditdlg.lo eventconfigurationdlg.lo eventeditordlg.lo \
	uploadprofiles.lo projectprivate.lo projectoptions.lo projectnewgenerals.lo projectnewlocals.lo rescanprjdir.lo projectnewfinals.lo projectuploads.lo projectnewwebs.lo uploadprofiledlgs.lo membereditdlgs.lo teammembersdlgs.lo subprojecteditdlgs.lo eventconfigurationdlgs.lo eventeditordlgs.lo uploadprofilespage.lo
@KDE_USE_FINAL_FALSE@libproject_la_OBJECTS = $(libproject_la_nofinal_OBJECTS)
@KDE_USE_FINAL_TRUE@libproject_la_OBJECTS = $(libproject_la_final_OBJECTS)
DEFAULT_INCLUDES = -I.@am__isrc@ -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/admin/depcomp
am__depfiles_maybe = depfiles
#>- CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
#>- 	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
#>+ 2
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) $(KDE_CXXFLAGS)
#>- LTCXXCOMPILE = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
#>- 	--mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
#>- 	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
#>+ 3
LTCXXCOMPILE = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) $(KDE_CXXFLAGS)
CXXLD = $(CXX)
#>- CXXLINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
#>- 	--mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) \
#>- 	$(LDFLAGS) -o $@
#>+ 3
CXXLINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(KDE_CXXFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
SOURCES = $(libproject_la_SOURCES)
DIST_SOURCES = $(libproject_la_SOURCES)
HEADERS = $(noinst_HEADERS)
ETAGS = etags
CTAGS = ctags
#>- DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
#>+ 1
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST) $(KDE_DIST)
ACLOCAL = @ACLOCAL@
AMTAR = @AMTAR@
AR = @AR@
ARTSCCONFIG = @ARTSCCONFIG@
AUTOCONF = @AUTOCONF@
AUTODIRS = @AUTODIRS@
AUTOHEADER = @AUTOHEADER@
AUTOMAKE = @AUTOMAKE@
AWK = @AWK@
CC = @CC@
CCDEPMODE = @CCDEPMODE@
CFLAGS = @CFLAGS@
CONF_FILES = @CONF_FILES@
CPP = @CPP@
CPPFLAGS = @CPPFLAGS@
CXX = @CXX@
CXXCPP = @CXXCPP@
CXXDEPMODE = @CXXDEPMODE@
CXXFLAGS = @CXXFLAGS@
CYGPATH_W = @CYGPATH_W@
DCOPIDL = @DCOPIDL@
DCOPIDL2CPP = @DCOPIDL2CPP@
DCOPIDLNG = @DCOPIDLNG@
DCOP_DEPENDENCIES = @DCOP_DEPENDENCIES@
DEFS = @DEFS@
DEPDIR = @DEPDIR@
DOCS_PATH = @DOCS_PATH@
ECHO = @ECHO@
ECHO_C = @ECHO_C@
ECHO_N = @ECHO_N@
ECHO_T = @ECHO_T@
EGREP = @EGREP@
ENABLE_PERMISSIVE_FLAG = @ENABLE_PERMISSIVE_FLAG@
EXEEXT = @EXEEXT@
F77 = @F77@
FFLAGS = @FFLAGS@
FRAMEWORK_COREAUDIO = @FRAMEWORK_COREAUDIO@
GMSGFMT = @GMSGFMT@
GREP = @GREP@
GZIP_COMMAND = @GZIP_COMMAND@
HAVE_GCC_VISIBILITY = @HAVE_GCC_VISIBILITY@
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
KCFG_DEPENDENCIES = @KCFG_DEPENDENCIES@
KCONFIG_COMPILER = @KCONFIG_COMPILER@
KDECONFIG = @KDECONFIG@
KDE_CHECK_PLUGIN = @KDE_CHECK_PLUGIN@
KDE_EXTRA_RPATH = @KDE_EXTRA_RPATH@
KDE_INCLUDES = @KDE_INCLUDES@
KDE_LDFLAGS = @KDE_LDFLAGS@
KDE_MT_LDFLAGS = @KDE_MT_LDFLAGS@
KDE_MT_LIBS = @KDE_MT_LIBS@
KDE_NO_UNDEFINED = @KDE_NO_UNDEFINED@
KDE_PLUGIN = @KDE_PLUGIN@
KDE_RPATH = @KDE_RPATH@
KDE_USE_CLOSURE_FALSE = @KDE_USE_CLOSURE_FALSE@
KDE_USE_CLOSURE_TRUE = @KDE_USE_CLOSURE_TRUE@
KDE_USE_FINAL_FALSE = @KDE_USE_FINAL_FALSE@
KDE_USE_FINAL_TRUE = @KDE_USE_FINAL_TRUE@
KDE_USE_FPIE = @KDE_USE_FPIE@
KDE_USE_NMCHECK_FALSE = @KDE_USE_NMCHECK_FALSE@
KDE_USE_NMCHECK_TRUE = @KDE_USE_NMCHECK_TRUE@
KDE_USE_PIE = @KDE_USE_PIE@
KDE_XSL_STYLESHEET = @KDE_XSL_STYLESHEET@
KMDI_INCLUDES = @KMDI_INCLUDES@
KNEWSTUFF_INCLUDES = @KNEWSTUFF_INCLUDES@
LDFLAGS = @LDFLAGS@
LDFLAGS_AS_NEEDED = @LDFLAGS_AS_NEEDED@
LDFLAGS_NEW_DTAGS = @LDFLAGS_NEW_DTAGS@
LIBCOMPAT = @LIBCOMPAT@
LIBCRYPT = @LIBCRYPT@
LIBDL = @LIBDL@
LIBJPEG = @LIBJPEG@
LIBOBJS = @LIBOBJS@
LIBPNG = @LIBPNG@
LIBPTHREAD = @LIBPTHREAD@
LIBRESOLV = @LIBRESOLV@
LIBS = @LIBS@
LIBSM = @LIBSM@
LIBSOCKET = @LIBSOCKET@
LIBTOOL = @LIBTOOL@
LIBUCB = @LIBUCB@
LIBUTIL = @LIBUTIL@
LIBXML_CFLAGS = @LIBXML_CFLAGS@
LIBXML_LIBS = @LIBXML_LIBS@
LIBXML_PREFIX = @LIBXML_PREFIX@
LIBXSLT_CFLAGS = @LIBXSLT_CFLAGS@
LIBXSLT_LIBS = @LIBXSLT_LIBS@
LIBXSLT_PREFIX = @LIBXSLT_PREFIX@
LIBXSLT_REQUIRED_VERSION = @LIBXSLT_REQUIRED_VERSION@
LIBZ = @LIBZ@
LIB_KAB = @LIB_KAB@
LIB_KABC = @LIB_KABC@
LIB_KDECORE = @LIB_KDECORE@
LIB_KDED = @LIB_KDED@
LIB_KDEPIM = @LIB_KDEPIM@
LIB_KDEPRINT = @LIB_KDEPRINT@
LIB_KDEUI = @LIB_KDEUI@
LIB_KDNSSD = @LIB_KDNSSD@
LIB_KFILE = @LIB_KFILE@
LIB_KFM = @LIB_KFM@
LIB_KHTML = @LIB_KHTML@
LIB_KIMPROXY = @LIB_KIMPROXY@
LIB_KIO = @LIB_KIO@
LIB_KJS = @LIB_KJS@
LIB_KMDI = @LIB_KMDI@
LIB_KNEWSTUFF = @LIB_KNEWSTUFF@
LIB_KPARTS = @LIB_KPARTS@
LIB_KSPELL = @LIB_KSPELL@
LIB_KSYCOCA = @LIB_KSYCOCA@
LIB_KUNITTEST = @LIB_KUNITTEST@
LIB_KUTILS = @LIB_KUTILS@
LIB_POLL = @LIB_POLL@
LIB_QPE = @LIB_QPE@
LIB_QT = @LIB_QT@
LIB_SMB = @LIB_SMB@
LIB_X11 = @LIB_X11@
LIB_XEXT = @LIB_XEXT@
LIB_XRENDER = @LIB_XRENDER@
LN_S = @LN_S@
LTLIBOBJS = @LTLIBOBJS@
MAKEINFO = @MAKEINFO@
MAKEKDEWIDGETS = @MAKEKDEWIDGETS@
MCOPIDL = @MCOPIDL@
MEINPROC = @MEINPROC@
MKDIR_P = @MKDIR_P@
MOC = @MOC@
MSGFMT = @MSGFMT@
NOOPT_CFLAGS = @NOOPT_CFLAGS@
NOOPT_CXXFLAGS = @NOOPT_CXXFLAGS@
OBJEXT = @OBJEXT@
PACKAGE = @PACKAGE@
PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
PACKAGE_NAME = @PACKAGE_NAME@
PACKAGE_STRING = @PACKAGE_STRING@
PACKAGE_TARNAME = @PACKAGE_TARNAME@
PACKAGE_VERSION = @PACKAGE_VERSION@
PATH_SEPARATOR = @PATH_SEPARATOR@
PERL = @PERL@
PKG_CONFIG = @PKG_CONFIG@
QEXTMDI_SUBDIR = @QEXTMDI_SUBDIR@
QTE_NORTTI = @QTE_NORTTI@
QT_INCLUDES = @QT_INCLUDES@
QT_LDFLAGS = @QT_LDFLAGS@
RANLIB = @RANLIB@
SET_MAKE = @SET_MAKE@
SHELL = @SHELL@
STRIP = @STRIP@
TAR = @TAR@
TOPSUBDIRS = @TOPSUBDIRS@
UIC = @UIC@
UIC_TR = @UIC_TR@
USER_INCLUDES = @USER_INCLUDES@
USER_LDFLAGS = @USER_LDFLAGS@
USE_EXCEPTIONS = @USE_EXCEPTIONS@
USE_RTTI = @USE_RTTI@
USE_THREADS = @USE_THREADS@
VERSION = @VERSION@
WOVERLOADED_VIRTUAL = @WOVERLOADED_VIRTUAL@
XGETTEXT = @XGETTEXT@
XMKMF = @XMKMF@
XMLLINT = @XMLLINT@
XML_CONFIG = @XML_CONFIG@
XSLDBG_CFLAGS = @XSLDBG_CFLAGS@
XSLDBG_EXTRA_LIBS = @XSLDBG_EXTRA_LIBS@
XSLDBG_INCLUDEDIR = @XSLDBG_INCLUDEDIR@
XSLDBG_MAJOR_VERSION = @XSLDBG_MAJOR_VERSION@
XSLDBG_MICRO_VERSION = @XSLDBG_MICRO_VERSION@
XSLDBG_MINOR_VERSION = @XSLDBG_MINOR_VERSION@
XSLDBG_PREFIX = @XSLDBG_PREFIX@
XSLDBG_VERSION = @XSLDBG_VERSION@
XSLDBG_VERSION_INFO = @XSLDBG_VERSION_INFO@
XSLDBG_VERSION_NUMBER = @XSLDBG_VERSION_NUMBER@
XSLT_CONFIG = @XSLT_CONFIG@
X_EXTRA_LIBS = @X_EXTRA_LIBS@
X_INCLUDES = @X_INCLUDES@
X_LDFLAGS = @X_LDFLAGS@
X_PRE_LIBS = @X_PRE_LIBS@
X_RPATH = @X_RPATH@
abs_builddir = @abs_builddir@
abs_srcdir = @abs_srcdir@
abs_top_builddir = @abs_top_builddir@
abs_top_srcdir = @abs_top_srcdir@
ac_ct_CC = @ac_ct_CC@
ac_ct_CXX = @ac_ct_CXX@
ac_ct_F77 = @ac_ct_F77@
all_includes = @all_includes@
all_libraries = @all_libraries@
am__include = @am__include@
am__leading_dot = @am__leading_dot@
am__quote = @am__quote@
am__tar = @am__tar@
am__untar = @am__untar@
bindir = @bindir@
build = @build@
build_alias = @build_alias@
build_cpu = @build_cpu@
build_os = @build_os@
build_vendor = @build_vendor@
builddir = @builddir@
datadir = @datadir@
datarootdir = @datarootdir@
docdir = @docdir@
dvidir = @dvidir@
enable_editors = @enable_editors@
exec_prefix = @exec_prefix@
host = @host@
host_alias = @host_alias@
host_cpu = @host_cpu@
host_os = @host_os@
host_vendor = @host_vendor@
htmldir = @htmldir@
includedir = @includedir@
infodir = @infodir@
install_sh = @install_sh@
kde_appsdir = @kde_appsdir@
kde_bindir = @kde_bindir@
kde_confdir = @kde_confdir@
kde_datadir = @kde_datadir@
kde_htmldir = @kde_htmldir@
kde_icondir = @kde_icondir@
kde_includes = @kde_includes@
kde_kcfgdir = @kde_kcfgdir@
kde_libraries = @kde_libraries@
kde_libs_htmldir = @kde_libs_htmldir@
kde_libs_prefix = @kde_libs_prefix@
kde_locale = @kde_locale@
kde_mimedir = @kde_mimedir@
kde_moduledir = @kde_moduledir@
kde_qtver = @kde_qtver@
kde_servicesdir = @kde_servicesdir@
kde_servicetypesdir = @kde_servicetypesdir@
kde_sounddir = @kde_sounddir@
kde_styledir = @kde_styledir@
kde_templatesdir = @kde_templatesdir@
kde_wallpaperdir = @kde_wallpaperdir@
kde_widgetdir = @kde_widgetdir@
kdeinitdir = @kdeinitdir@
libdir = @libdir@
libexecdir = @libexecdir@
localedir = @localedir@
localstatedir = @localstatedir@
mandir = @mandir@
mkdir_p = @mkdir_p@
oldincludedir = @oldincludedir@
package = @package@
pdfdir = @pdfdir@
prefix = @prefix@
program_transform_name = @program_transform_name@
psdir = @psdir@
qt_includes = @qt_includes@
qt_libraries = @qt_libraries@
quanta_datadir = @quanta_datadir@
sbindir = @sbindir@
sharedstatedir = @sharedstatedir@
srcdir = @srcdir@
sysconfdir = @sysconfdir@
tar = @tar@
target = @target@
target_alias = @target_alias@
target_cpu = @target_cpu@
target_os = @target_os@
target_vendor = @target_vendor@
top_builddir = @top_builddir@
top_srcdir = @top_srcdir@
x_includes = @x_includes@
x_libraries = @x_libraries@
xdg_appsdir = @xdg_appsdir@
xdg_directorydir = @xdg_directorydir@
xdg_menudir = @xdg_menudir@
noinst_LTLIBRARIES = libproject.la
#>- METASOURCES = AUTO
#>- libproject_la_SOURCES = projectoptions.ui projectnewgenerals.ui \
#>- 			projectnewgeneral.cpp projectnewlocals.ui projectnewlocal.cpp rescanprj.cpp rescanprjdir.ui \
#>- 			projectnewfinals.ui projectuploads.ui projectnewfinal.cpp projectupload.cpp project.cpp \
#>- 			projectnewwebs.ui projectnewweb.cpp uploadprofiledlgs.ui projectlist.cpp \
#>- 			membereditdlgs.ui teammembersdlgs.ui teammembersdlg.cpp membereditdlg.cpp \
#>- 			subprojecteditdlgs.ui eventconfigurationdlgs.ui eventeditordlgs.ui eventconfigurationdlg.cpp \
#>- 			eventeditordlg.cpp uploadprofiles.cpp uploadprofilespage.ui projectprivate.cpp
#>+ 7
libproject_la_SOURCES=  \
			projectnewgeneral.cpp  projectnewlocal.cpp rescanprj.cpp  \
			  projectnewfinal.cpp projectupload.cpp project.cpp \
			 projectnewweb.cpp  projectlist.cpp \
			  teammembersdlg.cpp membereditdlg.cpp \
			   eventconfigurationdlg.cpp \
			eventeditordlg.cpp uploadprofiles.cpp  projectprivate.cpp projectoptions.cpp projectnewgenerals.cpp projectnewlocals.cpp rescanprjdir.cpp projectnewfinals.cpp projectuploads.cpp projectnewwebs.cpp uploadprofiledlgs.cpp membereditdlgs.cpp teammembersdlgs.cpp subprojecteditdlgs.cpp eventconfigurationdlgs.cpp eventeditordlgs.cpp uploadprofilespage.cpp

AM_CPPFLAGS = -I$(top_srcdir)/quanta/utility \
	-I$(top_srcdir)/quanta/parsers \
	-I$(top_srcdir)/quanta/dialogs \
	-I$(top_srcdir)/quanta/dialogs/tagdialogs \
	-I$(top_srcdir)/quanta/treeviews \
	-I$(top_srcdir)/quanta/src \
	-I$(top_srcdir)/quanta/utility \
	-I$(top_srcdir)/lib \
	-I$(top_srcdir)/quanta/components/debugger \
	-I$(top_srcdir)/quanta/components/debugger/interfaces \
	-I$(top_builddir)/quanta/dialogs \
	$(KMDI_INCLUDES) $(all_includes)

noinst_HEADERS = teammembersdlg.h membereditdlg.h eventconfigurationdlg.h \
	eventeditordlg.h

#>- all: all-am
#>+ 1
all: docs-am  all-am

.SUFFIXES:
.SUFFIXES: .cpp .lo .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
#>- 	@for dep in $?; do \
#>- 	  case '$(am__configure_deps)' in \
#>- 	    *$$dep*) \
#>- 	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
#>- 		&& exit 0; \
#>- 	      exit 1;; \
#>- 	  esac; \
#>- 	done; \
#>- 	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign  quanta/project/Makefile'; \
#>- 	cd $(top_srcdir) && \
#>- 	  $(AUTOMAKE) --foreign  quanta/project/Makefile
#>+ 12
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign  quanta/project/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --foreign  quanta/project/Makefile
	cd $(top_srcdir) && perl admin/am_edit quanta/project/Makefile.in
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

clean-noinstLTLIBRARIES:
	-test -z "$(noinst_LTLIBRARIES)" || rm -f $(noinst_LTLIBRARIES)
	@list='$(noinst_LTLIBRARIES)'; for p in $$list; do \
	  dir="`echo $$p | sed -e 's|/[^/]*$$||'`"; \
	  test "$$dir" != "$$p" || dir=.; \
	  echo "rm -f \"$${dir}/so_locations\""; \
	  rm -f "$${dir}/so_locations"; \
	done
libproject.la: $(libproject_la_OBJECTS) $(libproject_la_DEPENDENCIES) 
	$(CXXLINK)  $(libproject_la_OBJECTS) $(libproject_la_LIBADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eventconfigurationdlg.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eventeditordlg.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/membereditdlg.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/project.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/projectlist.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/projectnewfinal.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/projectnewgeneral.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/projectnewlocal.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/projectnewweb.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/projectprivate.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/projectupload.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/rescanprj.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/teammembersdlg.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/uploadprofiles.Plo@am__quote@

.cpp.o:
@am__fastdepCXX_TRUE@	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
@am__fastdepCXX_TRUE@	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.cpp.lo:
@am__fastdepCXX_TRUE@	$(LTCXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
@am__fastdepCXX_TRUE@	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$<' object='$@' libtool=yes @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(LTCXXCOMPILE) -c -o $@ $<

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonemtpy = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	    $$tags $$unique; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(LTLIBRARIES) $(HEADERS)
installdirs:
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
#>- clean: clean-am
#>+ 1
clean: kde-rpo-clean  clean-am

#>- clean-am: clean-generic clean-libtool clean-noinstLTLIBRARIES \
#>- 	mostlyclean-am
#>+ 2
clean-am: clean-metasources clean-ui clean-bcheck clean-final  clean-generic clean-libtool clean-noinstLTLIBRARIES \
	mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-exec-am:

install-html: install-html-am

install-info: install-info-am

install-man:

install-pdf: install-pdf-am

install-ps: install-ps-am

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am:

.MAKE: install-am install-strip

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-generic \
	clean-libtool clean-noinstLTLIBRARIES ctags distclean \
	distclean-compile distclean-generic distclean-libtool \
	distclean-tags distdir dvi dvi-am html html-am info info-am \
	install install-am install-data install-data-am install-dvi \
	install-dvi-am install-exec install-exec-am install-html \
	install-html-am install-info install-info-am install-man \
	install-pdf install-pdf-am install-ps install-ps-am \
	install-strip installcheck installcheck-am installdirs \
	maintainer-clean maintainer-clean-generic mostlyclean \
	mostlyclean-compile mostlyclean-generic mostlyclean-libtool \
	pdf pdf-am ps ps-am tags uninstall uninstall-am

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:

#>+ 3
teammembersdlg.moc: $(srcdir)/teammembersdlg.h
	$(MOC) $(srcdir)/teammembersdlg.h -o teammembersdlg.moc

#>+ 2
mocs: teammembersdlg.moc

#>+ 3
eventconfigurationdlg.moc: $(srcdir)/eventconfigurationdlg.h
	$(MOC) $(srcdir)/eventconfigurationdlg.h -o eventconfigurationdlg.moc

#>+ 2
mocs: eventconfigurationdlg.moc

#>+ 3
project.moc: $(srcdir)/project.h
	$(MOC) $(srcdir)/project.h -o project.moc

#>+ 2
mocs: project.moc

#>+ 3
membereditdlg.moc: $(srcdir)/membereditdlg.h
	$(MOC) $(srcdir)/membereditdlg.h -o membereditdlg.moc

#>+ 2
mocs: membereditdlg.moc

#>+ 3
projectnewlocal.moc: $(srcdir)/projectnewlocal.h
	$(MOC) $(srcdir)/projectnewlocal.h -o projectnewlocal.moc

#>+ 2
mocs: projectnewlocal.moc

#>+ 3
projectnewgeneral.moc: $(srcdir)/projectnewgeneral.h
	$(MOC) $(srcdir)/projectnewgeneral.h -o projectnewgeneral.moc

#>+ 2
mocs: projectnewgeneral.moc

#>+ 3
projectnewweb.moc: $(srcdir)/projectnewweb.h
	$(MOC) $(srcdir)/projectnewweb.h -o projectnewweb.moc

#>+ 2
mocs: projectnewweb.moc

#>+ 3
projectprivate.moc: $(srcdir)/projectprivate.h
	$(MOC) $(srcdir)/projectprivate.h -o projectprivate.moc

#>+ 2
mocs: projectprivate.moc

#>+ 3
projectupload.moc: $(srcdir)/projectupload.h
	$(MOC) $(srcdir)/projectupload.h -o projectupload.moc

#>+ 2
mocs: projectupload.moc

#>+ 3
rescanprj.moc: $(srcdir)/rescanprj.h
	$(MOC) $(srcdir)/rescanprj.h -o rescanprj.moc

#>+ 2
mocs: rescanprj.moc

#>+ 3
projectnewfinal.moc: $(srcdir)/projectnewfinal.h
	$(MOC) $(srcdir)/projectnewfinal.h -o projectnewfinal.moc

#>+ 2
mocs: projectnewfinal.moc

#>+ 3
eventeditordlg.moc: $(srcdir)/eventeditordlg.h
	$(MOC) $(srcdir)/eventeditordlg.h -o eventeditordlg.moc

#>+ 2
mocs: eventeditordlg.moc

#>+ 3
clean-metasources:
	-rm -f  teammembersdlg.moc eventconfigurationdlg.moc project.moc membereditdlg.moc projectnewlocal.moc projectnewgeneral.moc projectnewweb.moc projectprivate.moc projectupload.moc rescanprj.moc projectnewfinal.moc eventeditordlg.moc

#>+ 2
KDE_DIST=projectnewgeneral.h projectupload.h projectnewfinals.ui projecturl.h projectprivate.h teammembersdlgs.ui uploadprofilespage.ui Makefile.in eventconfigurationdlgs.ui projectnewlocals.ui projectlist.h projectnewlocal.h projectoptions.ui.h projectnewfinal.h uploadprofilespage.ui.h subprojecteditdlgs.ui projectnewweb.h membereditdlgs.ui projectuploads.ui rescanprj.h uploadprofiledlgs.ui projectoptions.ui rescanprjdir.ui project.h eventeditordlgs.ui projectnewgenerals.ui uploadprofiles.h projectnewwebs.ui Makefile.am 

#>+ 17
clean-ui:
	-rm -f \
	projectoptions.cpp projectoptions.h projectoptions.moc \
	projectnewgenerals.cpp projectnewgenerals.h projectnewgenerals.moc \
	projectnewlocals.cpp projectnewlocals.h projectnewlocals.moc \
	rescanprjdir.cpp rescanprjdir.h rescanprjdir.moc \
	projectnewfinals.cpp projectnewfinals.h projectnewfinals.moc \
	projectuploads.cpp projectuploads.h projectuploads.moc \
	projectnewwebs.cpp projectnewwebs.h projectnewwebs.moc \
	uploadprofiledlgs.cpp uploadprofiledlgs.h uploadprofiledlgs.moc \
	membereditdlgs.cpp membereditdlgs.h membereditdlgs.moc \
	teammembersdlgs.cpp teammembersdlgs.h teammembersdlgs.moc \
	subprojecteditdlgs.cpp subprojecteditdlgs.h subprojecteditdlgs.moc \
	eventconfigurationdlgs.cpp eventconfigurationdlgs.h eventconfigurationdlgs.moc \
	eventeditordlgs.cpp eventeditordlgs.h eventeditordlgs.moc \
	uploadprofilespage.cpp uploadprofilespage.h uploadprofilespage.moc 

#>+ 2
docs-am:

#>+ 15
force-reedit:
		@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign  quanta/project/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --foreign  quanta/project/Makefile
	cd $(top_srcdir) && perl admin/am_edit quanta/project/Makefile.in


#>+ 21
clean-bcheck: 
	rm -f *.bchecktest.cc *.bchecktest.cc.class a.out

bcheck: bcheck-am

bcheck-am:
	@for i in ; do \
	    if test $(srcdir)/$$i -nt $$i.bchecktest.cc; then \
	        echo "int main() {return 0;}" > $$i.bchecktest.cc ; \
	        echo "#include \"$$i\"" >> $$i.bchecktest.cc ; \
	        echo "$$i"; \
	        if ! $(CXXCOMPILE)  --dump-class-hierarchy -c $$i.bchecktest.cc; then \
	            rm -f $$i.bchecktest.cc; exit 1; \
	        fi ; \
	        echo "" >> $$i.bchecktest.cc.class; \
	        perl $(top_srcdir)/admin/bcheck.pl $$i.bchecktest.cc.class || { rm -f $$i.bchecktest.cc; exit 1; }; \
	        rm -f a.out; \
	    fi ; \
	done


#>+ 11
libproject_la.all_cpp.cpp: $(srcdir)/Makefile.in $(srcdir)/projectnewgeneral.cpp $(srcdir)/projectnewlocal.cpp $(srcdir)/rescanprj.cpp $(srcdir)/projectnewfinal.cpp $(srcdir)/projectupload.cpp $(srcdir)/project.cpp $(srcdir)/projectnewweb.cpp $(srcdir)/projectlist.cpp $(srcdir)/teammembersdlg.cpp $(srcdir)/membereditdlg.cpp $(srcdir)/eventconfigurationdlg.cpp $(srcdir)/eventeditordlg.cpp $(srcdir)/uploadprofiles.cpp $(srcdir)/projectprivate.cpp projectoptions.cpp projectnewgenerals.cpp projectnewlocals.cpp rescanprjdir.cpp projectnewfinals.cpp projectuploads.cpp projectnewwebs.cpp uploadprofiledlgs.cpp membereditdlgs.cpp teammembersdlgs.cpp subprojecteditdlgs.cpp eventconfigurationdlgs.cpp eventeditordlgs.cpp uploadprofilespage.cpp  subprojecteditdlgs.moc eventconfigurationdlg.moc project.moc membereditdlg.moc projectnewgeneral.moc teammembersdlgs.moc projectprivate.moc eventconfigurationdlgs.moc projectuploads.moc projectnewfinal.moc projectnewlocals.moc projectnewfinals.moc membereditdlgs.moc projectnewgenerals.moc teammembersdlg.moc projectoptions.moc rescanprjdir.moc projectnewweb.moc projectnewlocal.moc projectupload.moc projectnewwebs.moc uploadprofilespage.moc rescanprj.moc eventeditordlg.moc uploadprofiledlgs.moc eventeditordlgs.moc
	@echo 'creating libproject_la.all_cpp.cpp ...'; \
	rm -f libproject_la.all_cpp.files libproject_la.all_cpp.final; \
	echo "#define KDE_USE_FINAL 1" >> libproject_la.all_cpp.final; \
	for file in projectnewgeneral.cpp projectnewlocal.cpp rescanprj.cpp projectnewfinal.cpp projectupload.cpp project.cpp projectnewweb.cpp projectlist.cpp teammembersdlg.cpp membereditdlg.cpp eventconfigurationdlg.cpp eventeditordlg.cpp uploadprofiles.cpp projectprivate.cpp projectoptions.cpp projectnewgenerals.cpp projectnewlocals.cpp rescanprjdir.cpp projectnewfinals.cpp projectuploads.cpp projectnewwebs.cpp uploadprofiledlgs.cpp membereditdlgs.cpp teammembersdlgs.cpp subprojecteditdlgs.cpp eventconfigurationdlgs.cpp eventeditordlgs.cpp uploadprofilespage.cpp ; do \
	  echo "#include \"$$file\"" >> libproject_la.all_cpp.files; \
	  test ! -f $(srcdir)/$$file || egrep '^#pragma +implementation' $(srcdir)/$$file >> libproject_la.all_cpp.final; \
	done; \
	cat libproject_la.all_cpp.final libproject_la.all_cpp.files > libproject_la.all_cpp.cpp; \
	rm -f libproject_la.all_cpp.final libproject_la.all_cpp.files

#>+ 3
clean-final:
	-rm -f libproject_la.all_cpp.cpp

#>+ 3
final:
	$(MAKE) libproject_la_OBJECTS="$(libproject_la_final_OBJECTS)" all-am

#>+ 3
final-install:
	$(MAKE) libproject_la_OBJECTS="$(libproject_la_final_OBJECTS)" install-am

#>+ 3
no-final:
	$(MAKE) libproject_la_OBJECTS="$(libproject_la_nofinal_OBJECTS)" all-am

#>+ 3
no-final-install:
	$(MAKE) libproject_la_OBJECTS="$(libproject_la_nofinal_OBJECTS)" install-am

#>+ 3
kde-rpo-clean:
	-rm -f *.rpo

#>+ 41
$(srcdir)/projectnewfinal.cpp: projectoptions.h projectnewgenerals.h projectnewlocals.h rescanprjdir.h projectnewfinals.h projectuploads.h projectnewwebs.h uploadprofiledlgs.h membereditdlgs.h teammembersdlgs.h subprojecteditdlgs.h eventconfigurationdlgs.h eventeditordlgs.h uploadprofilespage.h 
projectnewfinal.lo: projectnewfinal.moc 
projectnewgeneral.lo: projectnewgeneral.moc 
$(srcdir)/eventeditordlg.cpp: projectoptions.h projectnewgenerals.h projectnewlocals.h rescanprjdir.h projectnewfinals.h projectuploads.h projectnewwebs.h uploadprofiledlgs.h membereditdlgs.h teammembersdlgs.h subprojecteditdlgs.h eventconfigurationdlgs.h eventeditordlgs.h uploadprofilespage.h 
$(srcdir)/rescanprj.cpp: projectoptions.h projectnewgenerals.h projectnewlocals.h rescanprjdir.h projectnewfinals.h projectuploads.h projectnewwebs.h uploadprofiledlgs.h membereditdlgs.h teammembersdlgs.h subprojecteditdlgs.h eventconfigurationdlgs.h eventeditordlgs.h uploadprofilespage.h 
project.o: project.moc 
eventconfigurationdlg.lo: eventconfigurationdlg.moc 
projectnewlocal.o: projectnewlocal.moc 
projectprivate.lo: projectprivate.moc 
eventconfigurationdlg.o: eventconfigurationdlg.moc 
projectnewgeneral.o: projectnewgeneral.moc 
nmcheck-am: nmcheck
$(srcdir)/project.cpp: projectoptions.h projectnewgenerals.h projectnewlocals.h rescanprjdir.h projectnewfinals.h projectuploads.h projectnewwebs.h uploadprofiledlgs.h membereditdlgs.h teammembersdlgs.h subprojecteditdlgs.h eventconfigurationdlgs.h eventeditordlgs.h uploadprofilespage.h 
teammembersdlg.o: teammembersdlg.moc 
$(srcdir)/membereditdlg.cpp: projectoptions.h projectnewgenerals.h projectnewlocals.h rescanprjdir.h projectnewfinals.h projectuploads.h projectnewwebs.h uploadprofiledlgs.h membereditdlgs.h teammembersdlgs.h subprojecteditdlgs.h eventconfigurationdlgs.h eventeditordlgs.h uploadprofilespage.h 
eventeditordlg.lo: eventeditordlg.moc 
$(srcdir)/eventconfigurationdlg.cpp: projectoptions.h projectnewgenerals.h projectnewlocals.h rescanprjdir.h projectnewfinals.h projectuploads.h projectnewwebs.h uploadprofiledlgs.h membereditdlgs.h teammembersdlgs.h subprojecteditdlgs.h eventconfigurationdlgs.h eventeditordlgs.h uploadprofilespage.h 
$(srcdir)/projectlist.cpp: projectoptions.h projectnewgenerals.h projectnewlocals.h rescanprjdir.h projectnewfinals.h projectuploads.h projectnewwebs.h uploadprofiledlgs.h membereditdlgs.h teammembersdlgs.h subprojecteditdlgs.h eventconfigurationdlgs.h eventeditordlgs.h uploadprofilespage.h 
rescanprj.o: rescanprj.moc 
$(srcdir)/projectnewgeneral.cpp: projectoptions.h projectnewgenerals.h projectnewlocals.h rescanprjdir.h projectnewfinals.h projectuploads.h projectnewwebs.h uploadprofiledlgs.h membereditdlgs.h teammembersdlgs.h subprojecteditdlgs.h eventconfigurationdlgs.h eventeditordlgs.h uploadprofilespage.h 
projectprivate.o: projectprivate.moc 
eventeditordlg.o: eventeditordlg.moc 
project.lo: project.moc 
$(srcdir)/projectprivate.cpp: projectoptions.h projectnewgenerals.h projectnewlocals.h rescanprjdir.h projectnewfinals.h projectuploads.h projectnewwebs.h uploadprofiledlgs.h membereditdlgs.h teammembersdlgs.h subprojecteditdlgs.h eventconfigurationdlgs.h eventeditordlgs.h uploadprofilespage.h 
projectupload.lo: projectupload.moc 
$(srcdir)/projectnewlocal.cpp: projectoptions.h projectnewgenerals.h projectnewlocals.h rescanprjdir.h projectnewfinals.h projectuploads.h projectnewwebs.h uploadprofiledlgs.h membereditdlgs.h teammembersdlgs.h subprojecteditdlgs.h eventconfigurationdlgs.h eventeditordlgs.h uploadprofilespage.h 
$(srcdir)/uploadprofiles.cpp: projectoptions.h projectnewgenerals.h projectnewlocals.h rescanprjdir.h projectnewfinals.h projectuploads.h projectnewwebs.h uploadprofiledlgs.h membereditdlgs.h teammembersdlgs.h subprojecteditdlgs.h eventconfigurationdlgs.h eventeditordlgs.h uploadprofilespage.h 
nmcheck: 
$(srcdir)/teammembersdlg.cpp: projectoptions.h projectnewgenerals.h projectnewlocals.h rescanprjdir.h projectnewfinals.h projectuploads.h projectnewwebs.h uploadprofiledlgs.h membereditdlgs.h teammembersdlgs.h subprojecteditdlgs.h eventconfigurationdlgs.h eventeditordlgs.h uploadprofilespage.h 
projectupload.o: projectupload.moc 
membereditdlg.lo: membereditdlg.moc 
rescanprj.lo: rescanprj.moc 
$(srcdir)/projectupload.cpp: projectoptions.h projectnewgenerals.h projectnewlocals.h rescanprjdir.h projectnewfinals.h projectuploads.h projectnewwebs.h uploadprofiledlgs.h membereditdlgs.h teammembersdlgs.h subprojecteditdlgs.h eventconfigurationdlgs.h eventeditordlgs.h uploadprofilespage.h 
projectnewweb.lo: projectnewweb.moc 
teammembersdlg.lo: teammembersdlg.moc 
projectnewfinal.o: projectnewfinal.moc 
membereditdlg.o: membereditdlg.moc 
projectnewlocal.lo: projectnewlocal.moc 
projectnewweb.o: projectnewweb.moc 
$(srcdir)/projectnewweb.cpp: projectoptions.h projectnewgenerals.h projectnewlocals.h rescanprjdir.h projectnewfinals.h projectuploads.h projectnewwebs.h uploadprofiledlgs.h membereditdlgs.h teammembersdlgs.h subprojecteditdlgs.h eventconfigurationdlgs.h eventeditordlgs.h uploadprofilespage.h 

#>+ 210
membereditdlgs.cpp: $(srcdir)/membereditdlgs.ui membereditdlgs.h membereditdlgs.moc
	rm -f membereditdlgs.cpp
	echo '#include <kdialog.h>' > membereditdlgs.cpp
	echo '#include <klocale.h>' >> membereditdlgs.cpp
	$(UIC) -tr ${UIC_TR} -i membereditdlgs.h $(srcdir)/membereditdlgs.ui > membereditdlgs.cpp.temp ; ret=$$?; \
	$(PERL) -pe "s,${UIC_TR}( \"\" ),QString::null,g" membereditdlgs.cpp.temp | $(PERL) -pe "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | $(PERL) -pe "s,image([0-9][0-9]*)_data,img\$$1_membereditdlgs,g" | $(PERL) -pe "s,: QWizard\(,: KWizard(,g" >> membereditdlgs.cpp ;\
	rm -f membereditdlgs.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "membereditdlgs.moc"' >> membereditdlgs.cpp; else rm -f membereditdlgs.cpp ; exit $$ret ; fi

membereditdlgs.h: $(srcdir)/membereditdlgs.ui
	rm -rf membereditdlgs.h;
	$(UIC) $(srcdir)/membereditdlgs.ui | $(PERL) -pi -e "s,public QWizard,public KWizard,g; s,#include <qwizard.h>,#include <kwizard.h>,g" >> membereditdlgs.h ;
membereditdlgs.moc: membereditdlgs.h
	$(MOC) membereditdlgs.h -o membereditdlgs.moc

uploadprofiledlgs.cpp: $(srcdir)/uploadprofiledlgs.ui uploadprofiledlgs.h uploadprofiledlgs.moc
	rm -f uploadprofiledlgs.cpp
	echo '#include <kdialog.h>' > uploadprofiledlgs.cpp
	echo '#include <klocale.h>' >> uploadprofiledlgs.cpp
	$(UIC) -tr ${UIC_TR} -i uploadprofiledlgs.h $(srcdir)/uploadprofiledlgs.ui > uploadprofiledlgs.cpp.temp ; ret=$$?; \
	$(PERL) -pe "s,${UIC_TR}( \"\" ),QString::null,g" uploadprofiledlgs.cpp.temp | $(PERL) -pe "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | $(PERL) -pe "s,image([0-9][0-9]*)_data,img\$$1_uploadprofiledlgs,g" | $(PERL) -pe "s,: QWizard\(,: KWizard(,g" >> uploadprofiledlgs.cpp ;\
	rm -f uploadprofiledlgs.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "uploadprofiledlgs.moc"' >> uploadprofiledlgs.cpp; else rm -f uploadprofiledlgs.cpp ; exit $$ret ; fi

uploadprofiledlgs.h: $(srcdir)/uploadprofiledlgs.ui
	rm -rf uploadprofiledlgs.h;
	$(UIC) $(srcdir)/uploadprofiledlgs.ui | $(PERL) -pi -e "s,public QWizard,public KWizard,g; s,#include <qwizard.h>,#include <kwizard.h>,g" >> uploadprofiledlgs.h ;
uploadprofiledlgs.moc: uploadprofiledlgs.h
	$(MOC) uploadprofiledlgs.h -o uploadprofiledlgs.moc

projectnewwebs.cpp: $(srcdir)/projectnewwebs.ui projectnewwebs.h projectnewwebs.moc
	rm -f projectnewwebs.cpp
	echo '#include <kdialog.h>' > projectnewwebs.cpp
	echo '#include <klocale.h>' >> projectnewwebs.cpp
	$(UIC) -tr ${UIC_TR} -i projectnewwebs.h $(srcdir)/projectnewwebs.ui > projectnewwebs.cpp.temp ; ret=$$?; \
	$(PERL) -pe "s,${UIC_TR}( \"\" ),QString::null,g" projectnewwebs.cpp.temp | $(PERL) -pe "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | $(PERL) -pe "s,image([0-9][0-9]*)_data,img\$$1_projectnewwebs,g" | $(PERL) -pe "s,: QWizard\(,: KWizard(,g" >> projectnewwebs.cpp ;\
	rm -f projectnewwebs.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "projectnewwebs.moc"' >> projectnewwebs.cpp; else rm -f projectnewwebs.cpp ; exit $$ret ; fi

projectnewwebs.h: $(srcdir)/projectnewwebs.ui
	rm -rf projectnewwebs.h;
	$(UIC) $(srcdir)/projectnewwebs.ui | $(PERL) -pi -e "s,public QWizard,public KWizard,g; s,#include <qwizard.h>,#include <kwizard.h>,g" >> projectnewwebs.h ;
projectnewwebs.moc: projectnewwebs.h
	$(MOC) projectnewwebs.h -o projectnewwebs.moc

rescanprjdir.cpp: $(srcdir)/rescanprjdir.ui rescanprjdir.h rescanprjdir.moc
	rm -f rescanprjdir.cpp
	echo '#include <kdialog.h>' > rescanprjdir.cpp
	echo '#include <klocale.h>' >> rescanprjdir.cpp
	$(UIC) -tr ${UIC_TR} -i rescanprjdir.h $(srcdir)/rescanprjdir.ui > rescanprjdir.cpp.temp ; ret=$$?; \
	$(PERL) -pe "s,${UIC_TR}( \"\" ),QString::null,g" rescanprjdir.cpp.temp | $(PERL) -pe "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | $(PERL) -pe "s,image([0-9][0-9]*)_data,img\$$1_rescanprjdir,g" | $(PERL) -pe "s,: QWizard\(,: KWizard(,g" >> rescanprjdir.cpp ;\
	rm -f rescanprjdir.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "rescanprjdir.moc"' >> rescanprjdir.cpp; else rm -f rescanprjdir.cpp ; exit $$ret ; fi

rescanprjdir.h: $(srcdir)/rescanprjdir.ui
	rm -rf rescanprjdir.h;
	$(UIC) $(srcdir)/rescanprjdir.ui | $(PERL) -pi -e "s,public QWizard,public KWizard,g; s,#include <qwizard.h>,#include <kwizard.h>,g" >> rescanprjdir.h ;
rescanprjdir.moc: rescanprjdir.h
	$(MOC) rescanprjdir.h -o rescanprjdir.moc

teammembersdlgs.cpp: $(srcdir)/teammembersdlgs.ui teammembersdlgs.h teammembersdlgs.moc
	rm -f teammembersdlgs.cpp
	echo '#include <kdialog.h>' > teammembersdlgs.cpp
	echo '#include <klocale.h>' >> teammembersdlgs.cpp
	$(UIC) -tr ${UIC_TR} -i teammembersdlgs.h $(srcdir)/teammembersdlgs.ui > teammembersdlgs.cpp.temp ; ret=$$?; \
	$(PERL) -pe "s,${UIC_TR}( \"\" ),QString::null,g" teammembersdlgs.cpp.temp | $(PERL) -pe "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | $(PERL) -pe "s,image([0-9][0-9]*)_data,img\$$1_teammembersdlgs,g" | $(PERL) -pe "s,: QWizard\(,: KWizard(,g" >> teammembersdlgs.cpp ;\
	rm -f teammembersdlgs.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "teammembersdlgs.moc"' >> teammembersdlgs.cpp; else rm -f teammembersdlgs.cpp ; exit $$ret ; fi

teammembersdlgs.h: $(srcdir)/teammembersdlgs.ui
	rm -rf teammembersdlgs.h;
	$(UIC) $(srcdir)/teammembersdlgs.ui | $(PERL) -pi -e "s,public QWizard,public KWizard,g; s,#include <qwizard.h>,#include <kwizard.h>,g" >> teammembersdlgs.h ;
teammembersdlgs.moc: teammembersdlgs.h
	$(MOC) teammembersdlgs.h -o teammembersdlgs.moc

projectnewfinals.cpp: $(srcdir)/projectnewfinals.ui projectnewfinals.h projectnewfinals.moc
	rm -f projectnewfinals.cpp
	echo '#include <kdialog.h>' > projectnewfinals.cpp
	echo '#include <klocale.h>' >> projectnewfinals.cpp
	$(UIC) -tr ${UIC_TR} -i projectnewfinals.h $(srcdir)/projectnewfinals.ui > projectnewfinals.cpp.temp ; ret=$$?; \
	$(PERL) -pe "s,${UIC_TR}( \"\" ),QString::null,g" projectnewfinals.cpp.temp | $(PERL) -pe "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | $(PERL) -pe "s,image([0-9][0-9]*)_data,img\$$1_projectnewfinals,g" | $(PERL) -pe "s,: QWizard\(,: KWizard(,g" >> projectnewfinals.cpp ;\
	rm -f projectnewfinals.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "projectnewfinals.moc"' >> projectnewfinals.cpp; else rm -f projectnewfinals.cpp ; exit $$ret ; fi

projectnewfinals.h: $(srcdir)/projectnewfinals.ui
	rm -rf projectnewfinals.h;
	$(UIC) $(srcdir)/projectnewfinals.ui | $(PERL) -pi -e "s,public QWizard,public KWizard,g; s,#include <qwizard.h>,#include <kwizard.h>,g" >> projectnewfinals.h ;
projectnewfinals.moc: projectnewfinals.h
	$(MOC) projectnewfinals.h -o projectnewfinals.moc

projectnewlocals.cpp: $(srcdir)/projectnewlocals.ui projectnewlocals.h projectnewlocals.moc
	rm -f projectnewlocals.cpp
	echo '#include <kdialog.h>' > projectnewlocals.cpp
	echo '#include <klocale.h>' >> projectnewlocals.cpp
	$(UIC) -tr ${UIC_TR} -i projectnewlocals.h $(srcdir)/projectnewlocals.ui > projectnewlocals.cpp.temp ; ret=$$?; \
	$(PERL) -pe "s,${UIC_TR}( \"\" ),QString::null,g" projectnewlocals.cpp.temp | $(PERL) -pe "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | $(PERL) -pe "s,image([0-9][0-9]*)_data,img\$$1_projectnewlocals,g" | $(PERL) -pe "s,: QWizard\(,: KWizard(,g" >> projectnewlocals.cpp ;\
	rm -f projectnewlocals.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "projectnewlocals.moc"' >> projectnewlocals.cpp; else rm -f projectnewlocals.cpp ; exit $$ret ; fi

projectnewlocals.h: $(srcdir)/projectnewlocals.ui
	rm -rf projectnewlocals.h;
	$(UIC) $(srcdir)/projectnewlocals.ui | $(PERL) -pi -e "s,public QWizard,public KWizard,g; s,#include <qwizard.h>,#include <kwizard.h>,g" >> projectnewlocals.h ;
projectnewlocals.moc: projectnewlocals.h
	$(MOC) projectnewlocals.h -o projectnewlocals.moc

projectoptions.cpp: $(srcdir)/projectoptions.ui projectoptions.h projectoptions.moc
	rm -f projectoptions.cpp
	echo '#include <kdialog.h>' > projectoptions.cpp
	echo '#include <klocale.h>' >> projectoptions.cpp
	$(UIC) -tr ${UIC_TR} -i projectoptions.h $(srcdir)/projectoptions.ui > projectoptions.cpp.temp ; ret=$$?; \
	$(PERL) -pe "s,${UIC_TR}( \"\" ),QString::null,g" projectoptions.cpp.temp | $(PERL) -pe "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | $(PERL) -pe "s,image([0-9][0-9]*)_data,img\$$1_projectoptions,g" | $(PERL) -pe "s,: QWizard\(,: KWizard(,g" >> projectoptions.cpp ;\
	rm -f projectoptions.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "projectoptions.moc"' >> projectoptions.cpp; else rm -f projectoptions.cpp ; exit $$ret ; fi

projectoptions.h: $(srcdir)/projectoptions.ui
	rm -rf projectoptions.h;
	$(UIC) $(srcdir)/projectoptions.ui | $(PERL) -pi -e "s,public QWizard,public KWizard,g; s,#include <qwizard.h>,#include <kwizard.h>,g" >> projectoptions.h ;
projectoptions.moc: projectoptions.h
	$(MOC) projectoptions.h -o projectoptions.moc

projectuploads.cpp: $(srcdir)/projectuploads.ui projectuploads.h projectuploads.moc
	rm -f projectuploads.cpp
	echo '#include <kdialog.h>' > projectuploads.cpp
	echo '#include <klocale.h>' >> projectuploads.cpp
	$(UIC) -tr ${UIC_TR} -i projectuploads.h $(srcdir)/projectuploads.ui > projectuploads.cpp.temp ; ret=$$?; \
	$(PERL) -pe "s,${UIC_TR}( \"\" ),QString::null,g" projectuploads.cpp.temp | $(PERL) -pe "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | $(PERL) -pe "s,image([0-9][0-9]*)_data,img\$$1_projectuploads,g" | $(PERL) -pe "s,: QWizard\(,: KWizard(,g" >> projectuploads.cpp ;\
	rm -f projectuploads.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "projectuploads.moc"' >> projectuploads.cpp; else rm -f projectuploads.cpp ; exit $$ret ; fi

projectuploads.h: $(srcdir)/projectuploads.ui
	rm -rf projectuploads.h;
	$(UIC) $(srcdir)/projectuploads.ui | $(PERL) -pi -e "s,public QWizard,public KWizard,g; s,#include <qwizard.h>,#include <kwizard.h>,g" >> projectuploads.h ;
projectuploads.moc: projectuploads.h
	$(MOC) projectuploads.h -o projectuploads.moc

uploadprofilespage.cpp: $(srcdir)/uploadprofilespage.ui uploadprofilespage.h uploadprofilespage.moc
	rm -f uploadprofilespage.cpp
	echo '#include <kdialog.h>' > uploadprofilespage.cpp
	echo '#include <klocale.h>' >> uploadprofilespage.cpp
	$(UIC) -tr ${UIC_TR} -i uploadprofilespage.h $(srcdir)/uploadprofilespage.ui > uploadprofilespage.cpp.temp ; ret=$$?; \
	$(PERL) -pe "s,${UIC_TR}( \"\" ),QString::null,g" uploadprofilespage.cpp.temp | $(PERL) -pe "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | $(PERL) -pe "s,image([0-9][0-9]*)_data,img\$$1_uploadprofilespage,g" | $(PERL) -pe "s,: QWizard\(,: KWizard(,g" >> uploadprofilespage.cpp ;\
	rm -f uploadprofilespage.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "uploadprofilespage.moc"' >> uploadprofilespage.cpp; else rm -f uploadprofilespage.cpp ; exit $$ret ; fi

uploadprofilespage.h: $(srcdir)/uploadprofilespage.ui
	rm -rf uploadprofilespage.h;
	$(UIC) $(srcdir)/uploadprofilespage.ui | $(PERL) -pi -e "s,public QWizard,public KWizard,g; s,#include <qwizard.h>,#include <kwizard.h>,g" >> uploadprofilespage.h ;
uploadprofilespage.moc: uploadprofilespage.h
	$(MOC) uploadprofilespage.h -o uploadprofilespage.moc

eventeditordlgs.cpp: $(srcdir)/eventeditordlgs.ui eventeditordlgs.h eventeditordlgs.moc
	rm -f eventeditordlgs.cpp
	echo '#include <kdialog.h>' > eventeditordlgs.cpp
	echo '#include <klocale.h>' >> eventeditordlgs.cpp
	$(UIC) -tr ${UIC_TR} -i eventeditordlgs.h $(srcdir)/eventeditordlgs.ui > eventeditordlgs.cpp.temp ; ret=$$?; \
	$(PERL) -pe "s,${UIC_TR}( \"\" ),QString::null,g" eventeditordlgs.cpp.temp | $(PERL) -pe "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | $(PERL) -pe "s,image([0-9][0-9]*)_data,img\$$1_eventeditordlgs,g" | $(PERL) -pe "s,: QWizard\(,: KWizard(,g" >> eventeditordlgs.cpp ;\
	rm -f eventeditordlgs.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "eventeditordlgs.moc"' >> eventeditordlgs.cpp; else rm -f eventeditordlgs.cpp ; exit $$ret ; fi

eventeditordlgs.h: $(srcdir)/eventeditordlgs.ui
	rm -rf eventeditordlgs.h;
	$(UIC) $(srcdir)/eventeditordlgs.ui | $(PERL) -pi -e "s,public QWizard,public KWizard,g; s,#include <qwizard.h>,#include <kwizard.h>,g" >> eventeditordlgs.h ;
eventeditordlgs.moc: eventeditordlgs.h
	$(MOC) eventeditordlgs.h -o eventeditordlgs.moc

subprojecteditdlgs.cpp: $(srcdir)/subprojecteditdlgs.ui subprojecteditdlgs.h subprojecteditdlgs.moc
	rm -f subprojecteditdlgs.cpp
	echo '#include <kdialog.h>' > subprojecteditdlgs.cpp
	echo '#include <klocale.h>' >> subprojecteditdlgs.cpp
	$(UIC) -tr ${UIC_TR} -i subprojecteditdlgs.h $(srcdir)/subprojecteditdlgs.ui > subprojecteditdlgs.cpp.temp ; ret=$$?; \
	$(PERL) -pe "s,${UIC_TR}( \"\" ),QString::null,g" subprojecteditdlgs.cpp.temp | $(PERL) -pe "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | $(PERL) -pe "s,image([0-9][0-9]*)_data,img\$$1_subprojecteditdlgs,g" | $(PERL) -pe "s,: QWizard\(,: KWizard(,g" >> subprojecteditdlgs.cpp ;\
	rm -f subprojecteditdlgs.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "subprojecteditdlgs.moc"' >> subprojecteditdlgs.cpp; else rm -f subprojecteditdlgs.cpp ; exit $$ret ; fi

subprojecteditdlgs.h: $(srcdir)/subprojecteditdlgs.ui
	rm -rf subprojecteditdlgs.h;
	$(UIC) $(srcdir)/subprojecteditdlgs.ui | $(PERL) -pi -e "s,public QWizard,public KWizard,g; s,#include <qwizard.h>,#include <kwizard.h>,g" >> subprojecteditdlgs.h ;
subprojecteditdlgs.moc: subprojecteditdlgs.h
	$(MOC) subprojecteditdlgs.h -o subprojecteditdlgs.moc

projectnewgenerals.cpp: $(srcdir)/projectnewgenerals.ui projectnewgenerals.h projectnewgenerals.moc
	rm -f projectnewgenerals.cpp
	echo '#include <kdialog.h>' > projectnewgenerals.cpp
	echo '#include <klocale.h>' >> projectnewgenerals.cpp
	$(UIC) -tr ${UIC_TR} -i projectnewgenerals.h $(srcdir)/projectnewgenerals.ui > projectnewgenerals.cpp.temp ; ret=$$?; \
	$(PERL) -pe "s,${UIC_TR}( \"\" ),QString::null,g" projectnewgenerals.cpp.temp | $(PERL) -pe "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | $(PERL) -pe "s,image([0-9][0-9]*)_data,img\$$1_projectnewgenerals,g" | $(PERL) -pe "s,: QWizard\(,: KWizard(,g" >> projectnewgenerals.cpp ;\
	rm -f projectnewgenerals.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "projectnewgenerals.moc"' >> projectnewgenerals.cpp; else rm -f projectnewgenerals.cpp ; exit $$ret ; fi

projectnewgenerals.h: $(srcdir)/projectnewgenerals.ui
	rm -rf projectnewgenerals.h;
	$(UIC) $(srcdir)/projectnewgenerals.ui | $(PERL) -pi -e "s,public QWizard,public KWizard,g; s,#include <qwizard.h>,#include <kwizard.h>,g" >> projectnewgenerals.h ;
projectnewgenerals.moc: projectnewgenerals.h
	$(MOC) projectnewgenerals.h -o projectnewgenerals.moc

eventconfigurationdlgs.cpp: $(srcdir)/eventconfigurationdlgs.ui eventconfigurationdlgs.h eventconfigurationdlgs.moc
	rm -f eventconfigurationdlgs.cpp
	echo '#include <kdialog.h>' > eventconfigurationdlgs.cpp
	echo '#include <klocale.h>' >> eventconfigurationdlgs.cpp
	$(UIC) -tr ${UIC_TR} -i eventconfigurationdlgs.h $(srcdir)/eventconfigurationdlgs.ui > eventconfigurationdlgs.cpp.temp ; ret=$$?; \
	$(PERL) -pe "s,${UIC_TR}( \"\" ),QString::null,g" eventconfigurationdlgs.cpp.temp | $(PERL) -pe "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | $(PERL) -pe "s,image([0-9][0-9]*)_data,img\$$1_eventconfigurationdlgs,g" | $(PERL) -pe "s,: QWizard\(,: KWizard(,g" >> eventconfigurationdlgs.cpp ;\
	rm -f eventconfigurationdlgs.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "eventconfigurationdlgs.moc"' >> eventconfigurationdlgs.cpp; else rm -f eventconfigurationdlgs.cpp ; exit $$ret ; fi

eventconfigurationdlgs.h: $(srcdir)/eventconfigurationdlgs.ui
	rm -rf eventconfigurationdlgs.h;
	$(UIC) $(srcdir)/eventconfigurationdlgs.ui | $(PERL) -pi -e "s,public QWizard,public KWizard,g; s,#include <qwizard.h>,#include <kwizard.h>,g" >> eventconfigurationdlgs.h ;
eventconfigurationdlgs.moc: eventconfigurationdlgs.h
	$(MOC) eventconfigurationdlgs.h -o eventconfigurationdlgs.moc
